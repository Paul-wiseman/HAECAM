plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "org.jmailen.kotlinter"
    id 'org.sonarqube'
    id 'jacoco'
//    id "com.hiya.jacoco-android"
}

jacoco{
    toolVersion = '0.8.6'
    reportsDir = file("$buildDir/reports/coverage")
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    defaultConfig {
        applicationId "ng.com.thewhitecellfoundation.haemcam"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
//exclude the folders we do not want to check
def excludedPatterns = [
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*View*.*', // <-- this line is excluding classes ending w/ ViewModel
        '**/*ViewState*.*',
        '**/*ViewHolder*.*',
        '**/enum/**',
        '**/util/**',
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated by kotlin
        //add libraries
        'android/**/*.*',
        'com/**/*.*',
        'uk/**/*.*',
        'io/**/*.*',
        //remove what we don't test
        'androidTest/**/*.*',
        'test/**/*.*',
        '**/injector/**/*.*',
        '**/model/**/*.*',
        '**/mock/**/*.*',
        '**/event/**/*.*',
        '**/**_ViewBinding**',
        '**/databinding/*.*',
        '**/*EventType.*',
        '**/**Mocked',
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
]

sonarqube {
    properties {
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-30/android.jar"/* + ", build/intermediates/exploded-aar*//**//*classes.jar"*/
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/app_classes/debug"
        property "sonar.libraries", libraries
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/app_classes/debug"
        property "sonar.java.test.libraries", libraries
        property "sonar.exclusions", "build/**,**/*.png,*.iml, **/*generated*,'**/*Fragment*.*', '**/*Activity*.*', '**/databinding/**/*.*',"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/coverage/jacocoCombinedTestReports/jacocoCombinedTestReports.xml"
        property "sonar.junit.reportsPath", "build/test-results/debug"
        property "sonar.android.lint.report", "build/outputs/lint-results"
        property "sonar.login", "admin"
        property "sonar.password", "admin1"
    }
}


kotlinter {
    ignoreFailures = false
    indentSize = 4
    reporters = ['checkstyle', 'plain']
    experimentalRules = false
    disabledRules = ["no-wildcard-imports"]
}
preBuild.dependsOn(formatKotlin)

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*','**/databinding/**/*.*',]
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
task jacocoCombinedTestReports(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Verification"
    description = "Creates JaCoCo test coverage report for Unit and Instrumented Tests (combined) on the Debug build"
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // Files to exclude:
    // Generated classes, platform classes, etc.
    def excludes = excludedPatterns

    // generated classes
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    // sources
    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]
    // Output and existing data
    // Combine Unit test and Instrumented test reports
    executionData.from = fileTree(dir: "$buildDir", includes: [
            // Unit tests coverage data
            "jacoco/testDebugUnitTest.exec",
            // Instrumented tests coverage data
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ])
}

task getCoverage(type: Exec, dependsOn: ['jacocoCombinedTestReports']) {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/coverage/jacocoCombinedTestReports/html/index.html"
}

tasks.sonarqube.dependsOn jacocoCombinedTestReports

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //For code coverage
    testImplementation "org.jacoco:org.jacoco.agent:0.8.6"
    //Roboelectric
    testImplementation 'androidx.test:core:1.3.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:3.6.28'

}

