apply plugin: 'jacoco'
jacoco{
    toolVersion = '0.8.6'
    reportsDir = file("$buildDir/reports/coverage")
}


//exclude the folders we do not want to check
def excludedPatterns = [
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*View*.*', // <-- this line is excluding classes ending w/ ViewModel
        '**/*ViewState*.*',
        '**/*ViewHolder*.*',
        '**/enum/**',
        '**/util/**',
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
        '**/*Module.*', // Modules for Dagger.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', //Dagger auto-generated code
        '**/*$*$*.*', // Anonymous classes generated by kotlin
        //add libraries
        'android/**/*.*',
        'com/**/*.*',
        'uk/**/*.*',
        'io/**/*.*',
        //remove what we don't test
        'androidTest/**/*.*',
        'test/**/*.*',
        '**/injector/**/*.*',
        '**/model/**/*.*',
        '**/mock/**/*.*',
        '**/event/**/*.*',
        '**/**_ViewBinding**',
        '**/databinding/*.*',
        '**/*EventType.*',
        '**/**Mocked',
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
]
task jacocoCombinedTestReports(type: JacocoReport, dependsOn: ['test', 'createDebugCoverageReport']) {
    group = "TestReport"
    description = "Creates JaCoCo test coverage report for Unit and Instrumented Tests (combined) on the Debug build"
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // Files to exclude:
    // Generated classes, platform classes, etc.
    def excludes = excludedPatterns

    // generated classes
    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )
    // sources
    sourceDirectories.from = [
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]
    // Output and existing data
    // Combine Unit test and Instrumented test reports
    executionData.from = fileTree(dir: "$buildDir", includes: [
            // Unit tests coverage data
            "jacoco/testDebugUnitTest.exec",
            // Instrumented tests coverage data
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ])
}

task getCoverage(type: Exec, dependsOn: ['jacocoCombinedTestReports']) {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/coverage/jacocoCombinedTestReports/html/index.html"
}